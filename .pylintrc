[MASTER]
# Use multiple processes to speed up Pylint
jobs=0

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Use multiple processes to speed up Pylint.
jobs=0

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# List of Python modules, where to extract the docstring convention from. This
# is used for ignoring the first argument when the callback is called from an
# exception handler. Setting to "all" will disable this feature. This option
# has no effect if the docstring-convention is not set to "google".
docstring-convention=

# Add any Python module names here, which contain wildcard imports. Pylint
# supports wildcard imports from modules that define a __all__ variable.
ignore=CVS

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint.
jobs=0

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# List of Python modules, where to extract the docstring convention from. This
# is used for ignoring the first argument when the callback is called from an
# exception handler. Setting to "all" will disable this feature. This option
# has no effect if the docstring-convention is not set to "google".
docstring-convention=

# Add any Python module names here, which contain wildcard imports. Pylint
# supports wildcard imports from modules that define a __all__ variable.
ignore=CVS

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint.
jobs=0

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# List of Python modules, where to extract the docstring convention from. This
# is used for ignoring the first argument when the callback is called from an
# exception handler. Setting to "all" will disable this feature. This option
# has no effect if the docstring-convention is not set to "google".
docstring-convention=

# Add any Python module names here, which contain wildcard imports. Pylint
# supports wildcard imports from modules that define a __all__ variable.
ignore=CVS

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

[MESSAGES CONTROL]
# Disable specific warnings that are not relevant for this project
disable=C0111,  # missing-docstring
        C0103,  # invalid-name
        C0303,  # trailing-whitespace
        W0621,  # redefined-outer-name
        W0611,  # unused-import
        W0612,  # unused-variable
        W0613,  # unused-argument
        R0903,  # too-few-public-methods
        R0913,  # too-many-arguments
        R0914,  # too-many-locals
        R0915,  # too-many-statements
        W0703,  # broad-except
        E1101,  # no-member (for OpenCV and TensorFlow)
        W0212,  # protected-access
        W0702,  # bare-except

[REPORTS]
# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=text

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
files-output=no

# Tells whether to display a full report or only the messages
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
#msg-template=

# Include a brief explanation of the error code in the output
include-ids=no

# Include a brief explanation of the error code in the output
include-ids=no

[BASIC]
# Regular expression which should only match function or class names. You may
# want to change the function regexp in order to improve the detection of
# docstring using a more strict naming convention.
#function-rgx=[a-z_][a-z0-9_]{2,50}$
function-rgx=[a-z_][a-z0-9_]{2,50}$

# Regular expression which should only match correct class names
#class-rgx=[A-Z_][a-zA-Z0-9]+$
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression which should only match correct module names
#module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression which should only match correct method names
#method-rgx=[a-z_][a-z0-9_]{2,50}$
method-rgx=[a-z_][a-z0-9_]{2,50}$

# Regular expression which should only match correct instance attribute names
#attr-rgx=[a-z_][a-z0-9_]{2,50}$
attr-rgx=[a-z_][a-z0-9_]{2,50}$

# Regular expression which should only match correct argument names
#argument-rgx=[a-z_][a-z0-9_]{2,50}$
argument-rgx=[a-z_][a-z0-9_]{2,50}$

# Regular expression which should only match correct variable names
#variable-rgx=[a-z_][a-z0-9_]{2,50}$
variable-rgx=[a-z_][a-z0-9_]{2,50}$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
#inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,id

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Name of the style checker to use
name-format=snake_case

[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore imports when computing similarities.
ignore-imports=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore comments when computing similarities.
ignore-comments=yes

[FORMAT]
# Maximum number of characters on a single line.
max-line-length=100

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no

# List of optional constructs for which whitespace checking is disabled
no-space-check=trailing-comma,dict-separator

# Maximum number of characters on a single line.
max-line-length=100

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no

# List of optional constructs for for which whitespace checking is disabled
no-space-check=trailing-comma,dict-separator

[MISCELLANEOUS]
# List of note tags to take into consideration. Note that the presence of the
# tag in the code is not sufficient: the tag must be present in the
# 'notes' parameter of the function.
notes=FIXME,TODO,XXX,HACK

[VARIABLES]
# List of additional names to consider as builtins
additional-builtins=

# Regular expression which should only match function or class names. You may
# want to change the function regexp in order to improve the detection of
# docstring using a more strict naming convention.
#function-rgx=[a-z_][a-z0-9_]{2,50}$
function-rgx=[a-z_][a-z0-9_]{2,50}$

# Regular expression which should only match correct class names
#class-rgx=[A-Z_][a-zA-Z0-9]+$
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression which should only match correct module names
#module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression which should only match correct method names
#method-rgx=[a-z_][a-z0-9_]{2,50}$
method-rgx=[a-z_][a-z0-9_]{2,50}$

# Regular expression which should only match correct instance attribute names
#attr-rgx=[a-z_][a-z0-9_]{2,50}$
attr-rgx=[a-z_][a-z0-9_]{2,50}$

# Regular expression which should only match correct argument names
#argument-rgx=[a-z_][a-z0-9_]{2,50}$
argument-rgx=[a-z_][a-z0-9_]{2,50}$

# Regular expression which should only match correct variable names
#variable-rgx=[a-z_][a-z0-9_]{2,50}$
variable-rgx=[a-z_][a-z0-9_]{2,50}$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
#inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,id

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Name of the style checker to use
name-format=snake_case

[CLASSES]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,_fields,_replace,_source,_make

[DESIGN]
# Maximum number of arguments for function / method
max-args=10

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901)
max-parents=7

# Maximum number of attributes for a class (see R0902)
max-attributes=7

# Minimum number of public methods for a class (see R0903)
min-public-methods=2

# Maximum number of public methods for a class (see R0904)
max-public-methods=20

[EXCEPTIONS]
# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception 